// Kode JavaScript terenkripsi menggunakan Base64
const encryptedCode = '';

// Fungsi untuk mendekripsi dan mengeksekusi kode
function runDecryptedCode(encryptedCode) {
    const decodedCode = atob(encryptedCode);
    eval(decodedCode);
}

// Jalankan fungsi untuk mendekripsi dan mengeksekusi kode
runDecryptedCode(encryptedCode);
